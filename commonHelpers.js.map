{"version":3,"file":"commonHelpers.js","sources":["../src/js/pixabay-api.js","../src/js/render-functions.js","../src/img/error.svg","../src/main.js"],"sourcesContent":["export function getPhotos(q, page) {\n  const BASE_URL = 'https://pixabay.com/api/'; // Ендпоінт - посилання на сервер\n  const API_KEY = '45170057-222a781b727842b81c5ded16b'; // ключ доступу до серверу (може бути, а може не бути)\n  const params = new URLSearchParams({\n    key: API_KEY,\n    page, // передається номер сторінки, яку треба показувати в моменті прям зараз в конкретну секунду, а потім їх можна довантажувати\n    per_page: 10, // кількість елементів за одним запитом (тобто коли людина перший раз ввела слово), наступним запитом буде вважатись натискання на кнопку показати більше і довантажить таку ж кількість)\n    q, // запит, який вводять в пошук\n    image_type: 'photo',\n    orientation: 'horizontal',\n    safesearch: 'true',\n  });\n  // Функція, яка робить запит на сервер. Повертає проміс (обіцянку повернути відповіль). Може бути помилка, а може бути успіх. Успіх я оброблюю в then, а помилку в catch.\n  return fetch(`${BASE_URL}?${params}`).then(response => {\n    // в then я маю отримати response - це успішна відповідь, яка приходить з серверу в форматі JSON (умовно це інформція про картинки, лайки, скачування ітд)\n    // перевіряємо чи прийшла відповідь чи сталась помилка (може статись умовно, якщо сервер не прцює, я ввела невірний ключ ітд)\n    // if (!response.ok) - якщо відповідь НЕ окей, то зроби помилку\n    // throw new Error(response.status) - прокинути (примусово відобарзити) помилку в консолі (її статус)\n    if (!response.ok) {\n      throw new Error(response.status);\n    }\n    return response.json(); // переводимо з JSON формату в масив або об'єкт або рядок в залежності від того з чим працюємо, тобо що прийде нам у відповідь\n  });\n}\n","function imageMarkup({\n  webformatURL,\n  largeImageURL,\n  tags,\n  likes,\n  views,\n  comments,\n  downloads,\n}) {\n  return `<li class=\"gallery\">\n            <a class=\"list\" href=\"${largeImageURL}\">\n              <img class=\"photo\" src=\"${webformatURL}\" alt=\"${tags}\" />\n              <ul class=\"properties-list\">\n                <li>\n                  <p class=\"prop\">Likes</p>\n                  <p class=\"prop-value\">${likes}</p>\n                </li>\n                <li>\n                  <p class=\"prop\">Views</p>\n                  <p class=\"prop-value\">${views}</p>\n                </li>\n                <li>\n                  <p class=\"prop\">Comments</p>\n                  <p class=\"prop-value\">${comments}</p>\n                </li>\n                <li>\n                  <p class=\"prop\">Downloads</p>\n                  <p class=\"prop-value\">${downloads}</p>\n                </li>\n              </ul>\n            </a>\n          </li>`;\n}\n\nexport function imagesMarkup(array) {\n  return array.map(imageMarkup).join('');\n}\n","export default \"__VITE_ASSET__8479b7dd__\"","import iziToast from 'izitoast';\nimport SimpleLightbox from 'simplelightbox';\nimport 'izitoast/dist/css/iziToast.min.css';\nimport 'simplelightbox/dist/simple-lightbox.min.css';\nimport { getPhotos } from './js/pixabay-api';\nimport { imagesMarkup } from './js/render-functions';\nimport iconError from './img/error.svg';\n\nconst formElement = document.querySelector('.js-form');\nconst ulElement = document.querySelector('.js-gallery-list');\nconst loader = document.querySelector('.loader');\n\nformElement.addEventListener('submit', onSearchPhotos);\n//функція, яка потрібна, щоб при натисканні людиною кнопки:\n\nfunction onSearchPhotos(event) {\n  event.preventDefault();\n  ulElement.innerHTML = ''; // Очищує розмітку бо потім я використаю замість innerHTML на 55 рядку insertAdjacentHTML() і через в мене перестане очищуватись розмітка\n  // 1) Отримати дані з форми, які ввела людина (введене значення)\n  const formData = new FormData(formElement); // Отримуємо екземпляр класу форми new FormData (це потрібно для того, щоб використати метод get)\n  const searchQuery = formData.get('search').trim(); // Дістаємо дані, які ввела людина, щоб це зробити потрібно діставати їх по атрибуту name інпуту. А потім методом trim прибираємо пробіли\n  // роблю перевірку, чи не відправили мені пусте поле\n  if (searchQuery === '') {\n    return iziToast.error({\n      iconUrl: iconError,\n      title: 'Error',\n      titleColor: '#fff',\n      messageColor: '#fff',\n      backgroundColor: '#ef4040',\n      position: 'topRight',\n      message: 'The field cannot be empty!',\n    });\n  }\n  // Перед запитом на сервер, якщо я виуористовую лоадер його потрібно показати. Це робиться за допомогою видалення класу\n  loader.classList.remove('hidden');\n  // Викликаємо функцію запиту на сервер, яка була написана у pixabay-api і передаємо пошуковий запит (те, що ввела людина, дані, що ми раніше дістали)\n  getPhotos(searchQuery)\n    // Оброблюємо успішну відповідь, яка приходить з серверу (тобто мається на увазі, що все ок і в нас на сторінці показуються картинки)\n    .then(response => {\n      // перевіряємо чи нам не прийшла з серверу пуста відповідь і чи є дані за таким пошуком\n      if (response.hits.length === 0) {\n        return iziToast.error({\n          iconUrl: iconError,\n          title: 'Error',\n          titleColor: '#fff',\n          messageColor: '#fff',\n          backgroundColor: '#ef4040',\n          position: 'topRight',\n          message:\n            'Sorry, there are no images matching your search query. Please try again!',\n        });\n      }\n\n      // Це функці рендеру. Ми відмальовуємо отримані дані з серверу на сторінці (тобто картинки та дані під ними)\n      ulElement.innerHTML = imagesMarkup(response.hits); // hits - я дивлюсь на вкладці networks в інструментах розробника (може бути різні слово в залежності від бібіліотеки)\n      // Використовуємо бібліотеку, щоб натискати на зображення та відкривати модальне вікно\n      const lightbox = new SimpleLightbox('.gallery a', {\n        captionsData: 'alt',\n        captionDelay: 250,\n      });\n      lightbox.refresh(); // Нам завантажується по 20 зображень. Коли ми відкриваємо модалку, то вона запам'ятовує та в куточку пише, що зображень лише 20. А припустимо, що в нас є кнопка завантажити більше. Без цього тетому в модалці так і лишиться лише 20 зображень, а наступні не відкриватимуться у модальному вікні. Цей метод бібліотеки для того, щоб оновлювати інформацію і в модалці завантажувалось більше зображень\n    })\n    .catch(error => {\n      console.log(error);\n    })\n    .finally(() => {\n      loader.classList.add('hidden');\n      event.target.reset();\n    });\n} // очищаємо поля та приховуємо лоадер (цей блок виконається в будь-якому випадку і при помилці і при успішному)\n"],"names":["getPhotos","q","page","BASE_URL","API_KEY","params","response","imageMarkup","webformatURL","largeImageURL","tags","likes","views","comments","downloads","imagesMarkup","array","iconError","formElement","ulElement","loader","onSearchPhotos","event","searchQuery","iziToast","SimpleLightbox","error"],"mappings":"6vBAAO,SAASA,EAAUC,EAAGC,EAAM,CACjC,MAAMC,EAAW,2BACXC,EAAU,qCACVC,EAAS,IAAI,gBAAgB,CACjC,IAAKD,EACL,KAAAF,EACA,SAAU,GACV,EAAAD,EACA,WAAY,QACZ,YAAa,aACb,WAAY,MAChB,CAAG,EAED,OAAO,MAAM,GAAGE,CAAQ,IAAIE,CAAM,EAAE,EAAE,KAAKC,GAAY,CAKrD,GAAI,CAACA,EAAS,GACZ,MAAM,IAAI,MAAMA,EAAS,MAAM,EAEjC,OAAOA,EAAS,MACpB,CAAG,CACH,CCvBA,SAASC,EAAY,CACnB,aAAAC,EACA,cAAAC,EACA,KAAAC,EACA,MAAAC,EACA,MAAAC,EACA,SAAAC,EACA,UAAAC,CACF,EAAG,CACD,MAAO;AAAA,oCAC2BL,CAAa;AAAA,wCACTD,CAAY,UAAUE,CAAI;AAAA;AAAA;AAAA;AAAA,0CAIxBC,CAAK;AAAA;AAAA;AAAA;AAAA,0CAILC,CAAK;AAAA;AAAA;AAAA;AAAA,0CAILC,CAAQ;AAAA;AAAA;AAAA;AAAA,0CAIRC,CAAS;AAAA;AAAA;AAAA;AAAA,gBAKnD,CAEO,SAASC,EAAaC,EAAO,CAClC,OAAOA,EAAM,IAAIT,CAAW,EAAE,KAAK,EAAE,CACvC,CCpCA,MAAeU,EAAA,2CCQTC,EAAc,SAAS,cAAc,UAAU,EAC/CC,EAAY,SAAS,cAAc,kBAAkB,EACrDC,EAAS,SAAS,cAAc,SAAS,EAE/CF,EAAY,iBAAiB,SAAUG,CAAc,EAGrD,SAASA,EAAeC,EAAO,CAC7BA,EAAM,eAAc,EACpBH,EAAU,UAAY,GAGtB,MAAMI,EADW,IAAI,SAASL,CAAW,EACZ,IAAI,QAAQ,EAAE,KAAI,EAE/C,GAAIK,IAAgB,GAClB,OAAOC,EAAS,MAAM,CACpB,QAASP,EACT,MAAO,QACP,WAAY,OACZ,aAAc,OACd,gBAAiB,UACjB,SAAU,WACV,QAAS,4BACf,CAAK,EAGHG,EAAO,UAAU,OAAO,QAAQ,EAEhCpB,EAAUuB,CAAW,EAElB,KAAKjB,GAAY,CAEhB,GAAIA,EAAS,KAAK,SAAW,EAC3B,OAAOkB,EAAS,MAAM,CACpB,QAASP,EACT,MAAO,QACP,WAAY,OACZ,aAAc,OACd,gBAAiB,UACjB,SAAU,WACV,QACE,0EACZ,CAAS,EAIHE,EAAU,UAAYJ,EAAaT,EAAS,IAAI,EAE/B,IAAImB,EAAe,aAAc,CAChD,aAAc,MACd,aAAc,GACtB,CAAO,EACQ,QAAO,CACtB,CAAK,EACA,MAAMC,GAAS,CACd,QAAQ,IAAIA,CAAK,CACvB,CAAK,EACA,QAAQ,IAAM,CACbN,EAAO,UAAU,IAAI,QAAQ,EAC7BE,EAAM,OAAO,OACnB,CAAK,CACL"}